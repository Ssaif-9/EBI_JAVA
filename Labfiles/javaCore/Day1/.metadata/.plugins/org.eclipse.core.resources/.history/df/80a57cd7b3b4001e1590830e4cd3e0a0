package core.annotation;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

@Author(DeveloperName = "abdelaziz Sayed" , Salary=10000)
public class TestAnnotation {

	@Author(DeveloperName = "abdelaziz Sayed" , Salary=10000)
	public static String myName = "";
	String Date;
	
	@Author(DeveloperName = "Hoda" , Salary=3000)
	 TestAnnotation(){
	 }
	
	@Author(DeveloperName = "Alaa" , Salary=4000)
	public static void myMeth(){
		try{	
			Class<?> clas = Class.forName("core.annotations.TestAnnotation");
			Field field = clas.getField("myName");
			Method method = clas.getMethod("myMeth");
			Author methodAnnotation = method.getAnnotation(Author.class);
			Author classAnnotation = clas.getAnnotation(Author.class);
			Author FieldAnnotation = field.getAnnotation(Author.class);
			System.out.println("myMeth Methode Developer Name Is : "+ methodAnnotation.DeveloperName() +" And "+"Salary Is : " + methodAnnotation.Salary());
			System.out.println("TestAnnotation Class Developer Name Is :  " + classAnnotation.DeveloperName() +" And " +"Salary Is : " + classAnnotation.Salary());
			System.out.println("myName Field Developer Name Is :  " + FieldAnnotation.DeveloperName() +" And " +"Salary Is : " + FieldAnnotation.Salary());

		}catch(ClassNotFoundException e){
			System.out.println("Not Found Class");
		}catch(NoSuchMethodException E){
			System.out.println("Not Found Method");
		}catch(NoSuchFieldException b){
			System.out.println("Not Found Field");
		}
		
	}
	public static void main(String args[])
	{
		myMeth();
	}
}
